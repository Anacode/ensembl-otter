
### Bio::Otter::Lace::AceDatabase

package Bio::Otter::Lace::AceDatabase;

use strict;
use Carp;
use File::Path 'rmtree';
use Symbol 'gensym';
use Fcntl qw{ O_WRONLY O_CREAT };

sub new {
    my( $pkg ) = @_;
    
    return bless {}, $pkg;
}

sub home {
    my( $self, $home ) = @_;
    
    if ($home) {
        $self->{'_home'} = $home;
    }
    elsif (! $self->{'_home'}) {
        $self->{'_home'} = "/var/tmp/lace.$$";
    }
    return $self->{'_home'};
}

sub title {
    my( $self, $title ) = @_;
    
    if ($title) {
        $self->{'_title'} = $title;
    }
    elsif (! $self->{'_title'}) {
        $self->{'_title'} = "lace.$$";
    }
    return $self->{'_title'};
}

sub tar_file {
    my( $self, $tar_file ) = @_;
    
    if ($tar_file) {
        $self->{'_tar_file'} = $tar_file;
    }
    elsif (! $self->{'_tar_file'}) {
        my $root = $ENV{'LACE_LOCAL'} || '/nfs/humace2/hum/data';
        my $file = 'lace_acedb.tar';
        $self->{'_tar_file'} = "$root/$file";
    }
    return $self->{'_tar_file'};
}


sub tace {
    my( $self, $tace ) = @_;
    
    if ($tace) {
        $self->{'_tace'} = $tace;
    }
    return $self->{'_tace'} || 'tace';
}


sub error_flag {
    my( $self, $error_flag ) = @_;
    
    if (defined $error_flag) {
        $self->{'_error_flag'} = $error_flag;
    }
    return $self->{'_error_flag'};
}

sub add_acefile {
    my( $self, $ace ) = @_;
    
    my $af = $self->{'_acefile_list'} ||= [];
    push(@$af, $ace);
}

sub list_all_acefiles {
    my( $self ) = @_;
    
    if (my $af = $self->{'_acefile_list'}) {
        return @$af;
    } else {
        return;
    }
}

sub list_all_acefiles_fully_qualified {
    my( $self ) = @_;
    
    my $home = $self->home;
    my @acefiles = $self->list_all_acefiles;
    foreach (@acefiles) {
        $_ = "$home/$_" unless m{^/};
    }
    return @acefiles;
}

sub make_database_directory {
    my( $self ) = @_;
    
    my $home = $self->home;
    my $tar  = $self->tar_file;
    mkdir($home, 0777) or die "Can't mkdir('$home') : $!\n";
    
    my $tar_command = "cd $home ; tar xvf $tar";
    if (system($tar_command) != 0) {
        $self->error_flag(1);
        confess "Error running '$tar_command' exit($?)";
    }
    
    $self->add_acefile("$home/rawdata/methods.ace");
    $self->add_acefile("$home/rawdata/misc.ace");
    
    $self->make_passwd_wrm;
    $self->edit_displays_wrm;
}

sub make_passwd_wrm {
    my( $self ) = @_;

    my $passWrm = $self->home . '/wspec/passwd.wrm';
    my ($prog) = $0 =~ m{([^/]+)$};
    my $real_name      = ( getpwuid($<) )[0];
    my $effective_name = ( getpwuid($>) )[0];

    my $fh = gensym();
    sysopen($fh, $passWrm, O_CREAT | O_WRONLY, 0644)
        or confess "Can't write to '$passWrm' : $!";
    print $fh "// PASSWD.wrm generated by $prog\n\n";

    # acedb looks at the real user ID, but some
    # versions of the code seem to behave differently
    if ( $real_name ne $effective_name ) {
        print $fh "root\n\n$real_name\n\n$effective_name\n\n";
    }
    else {
        print $fh "root\n\n$real_name\n\n";
    }

    close $fh;    # Must close to ensure buffer is flushed into file
}

sub edit_displays_wrm {
    my( $self ) = @_;
    
    my $home  = $self->home;
    my $title = $self->title;
    
    my $displays = "$home/wspec/displays.wrm";

    my $disp_in = gensym();
    open $disp_in, $displays or confess "Can't read '$displays' : $!";
    my @disp = <$disp_in>;
    close $disp_in;

    foreach (@disp) {
        next unless /^_DDtMain/;

        # Add our title onto the Main window
        s/\s-t\s*"[^"]+/ -t "$title/i;
        last;
    }

    my $disp_out = gensym();
    open $disp_out, "> $displays" or confess "Can't write to '$displays' : $!";
    print $disp_out @disp;
    close $disp_out;
}


sub initialize_database {
    my( $self ) = @_;
    
    my $home = $self->home;
    my $tace = $self->tace;
    my @parse_commands = map "parse $_\n",
        $self->list_all_acefiles_fully_qualified;

    my $parse_log = "$home/init_parse.log";
    my $pipe = "| $tace $home > $parse_log";
    
    my $pipe_fh = gensym();
    open $pipe_fh, $pipe
        or die "Can't open pipe '$pipe' : $!";
    # Say "yes" to "initalize database?" question.
    print $pipe_fh "y\n";
    foreach my $com (@parse_commands) {
        print $pipe_fh $com;
    }
    close $pipe_fh or die "Error initializing database exit($?)\n";

    my $fh = gensym();
    open $fh, $parse_log or die "Can't open '$parse_log' : $!";
    my $file_log = '';
    my $in_parse = 0;
    my $errors = 0;
    while (<$fh>) {
        if (/parsing/i) {
            $file_log = "  $_";
            $in_parse = 1;
        }
        
        if (/(\d+) (errors|parse failed)/i) {
            if ($1) {
                warn "\nParse error detected:\n$file_log  $_\n";
                $errors++;
            }
        }
        elsif (/Sorry/) {
            warn "Apology detected:\n$file_log  $_\n";
            $errors++;
        }
        elsif ($in_parse) {
            $file_log .= "  $_";
        }
    }
    close $fh;

    return $errors;
}



sub DESTROY {
    my( $self ) = @_;
    
    my $home = $self->home;
    if ($self->error_flag) {
        warn "Not cleaning up '$home' because error flag is set\n";
        return;
    }
    
    rmtree($home);
}

1;

__END__

=head1 NAME - Bio::Otter::Lace::AceDatabase

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

