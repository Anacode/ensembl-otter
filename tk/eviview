#!/usr/local/bin/perl -w

# Collect the EviChains that match in a particular area,
# combine them into matching chains
# and show them to the user.
#
# lg4, 7.Apr'2005

use strict;
use Bio::Otter::Lace::Defaults;

use Evi::EviCollection;
use Evi::EviDisplay;
use Evi::Tictoc;

{
    my $dataset_name	= 'human';	# 'mouse', ...
    my $set_name	= 'ChrX-07';	# 'chr22-02', ...
    my $chr_name	= 'X';		# '22', ...
    my $margin		= 10000;	# any number > 0
    my $trstable	= 'OTTHUMT00000081638';
    my @rna_analyses  = ('vertrna','Est2genome_human','Est2genome_mouse','Est2genome_other');
    # my @protein_analyses = ('Uniprot');
    my @protein_analyses = ();

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'set=s'         => \$set_name,
		'chr=s'			=> \$chr_name,
		'trstable=s'	=> \$trstable,
		'margin=s'		=> \$margin,
    ) or $usage->();
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;
    $otter_dba->assembly_type($set_name);

    my $otter_slice;

    if(0) { # different ways to produce a slice on a chromosome
		my $start=153_236_054;
		my $end  =153_300_000;

		$otter_slice = $otter_dba->get_SliceAdaptor()->fetch_by_chr_start_end($chr_name,$start,$end);
    } else {
		$otter_slice = $otter_dba->get_SliceAdaptor()->fetch_by_transcript_stable_id($trstable, $margin);
    }

my $tt_evicoll = Evi::Tictoc->new("Building the evidence collection");
    my $evi_coll = Evi::EviCollection->new($otter_slice, [ @rna_analyses ], [@protein_analyses] );
$tt_evicoll->done();

    my $mw = CanvasWindow::MainWindow->new('EviView| Choose a transcript to work on');
	my $mcw = MenuCanvasWindow->new($mw);

    my $genes = $otter_dba->get_GeneAdaptor->fetch_by_Slice($otter_slice);
    for my $gene (@$genes) {
		for my $transcript (@{ $gene->get_all_Transcripts() }) {
			my $gene_name  = $gene->gene_info()->name()->name();
			my $trans_name = $transcript->transcript_info()->name();
			my $title = "${gene_name} || ${trans_name}";
			$mcw->canvas()->Button(
				-text => $title,
				-command => sub{
					Evi::EviDisplay->new($mw,"EviView| $title",$evi_coll,$transcript);
				},
			)->pack(
				-fill=>'x',
				-expand=>1,
			);
		}
	}
	$mcw->fix_window_min_max_sizes();

    Tk::MainLoop();
}

__END__

=head1 NAME - eviview

=head1 AUTHOR

Leo Gordon B<email> lg4@sanger.ac.uk

