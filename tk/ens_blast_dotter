#!/nfs/humace2/hum/bin/perl -w

### ens_blast_dotter

use strict;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use CanvasWindow;


{
    my $ensdb = Bio::EnsEMBL::DBSQL::DBAdaptor->new(
        -HOST   => 'ecs1b',
        -DBNAME => 'Chr9_heterochromatin',
        -USER   => 'ensro',
        );
    $ensdb->static_golden_path_type('TPF-REGION');
    
    my $vc = $ensdb->get_StaticGoldenPathAdaptor
        ->fetch_VirtualContig_by_chr_name('chr9');
    
    my $logic_name = 'contig_vs_contig';
    my ($ana) = $ensdb->get_AnalysisAdaptor
        ->fetch_by_logic_name($logic_name)
        or die "Can't get Analysis object for '$logic_name'";
    my $ana_id = $ana->dbID;
    
    my( @map );
    foreach my $map_c ($vc->_vmap->each_MapContig) {
        #print STDERR ".";
        my $start     = $map_c->start;
        my $end       = $map_c->end;
        my $raw_start = $map_c->rawcontig_start;
        my $raw_end   = $map_c->rawcontig_end;
        my $contig    = $map_c->contig;
        my $length = $contig->length;
        my $name = $contig->id;
        my $id = $contig->internal_id;

        #printf STDERR "%10d  %-10d  %s\n", $start, $end, $name;
        push(@map, [$start, $end, $name, $id]);
    }

    my $mw = CanvasWindow::MainWindow->new;
    my $cw = CanvasWindow->new($mw);
    my $canvas = $cw->canvas;
    $canvas->CanvasBind('<Button-1>', 'main::highlight_seq_rect');
    #$canvas->configure(-cursor => 'plus');

    my $scale = 2_000;
    my $col_max = 1;
    my $feature_count = 0;
    for (my $row = 0; $row < @map; $row++, $col_max++) {
        my $row_data = $map[$row];
        my $y1       = $row_data->[0] / $scale;
        my $y2       = $row_data->[1] / $scale;
        my $row_name = $row_data->[2];
        for (my $col = 0; $col < $col_max; $col++) {
            my $col_data = $map[$col];
            my $x1       = $col_data->[0] / $scale;
            my $x2       = $col_data->[1] / $scale;
            my $col_name = $col_data->[2];
            my $col_id   = $col_data->[3];
            
            my $seq_rect = $canvas->createRectangle($x1, $y1, $x2, $y2,
                -outline    => 'grey',
                -fill       => 'white',
                -tags       => ['seq_rect', "row=$row_name", "col=$col_name"],
                );
            
            my $sql = qq{
                SELECT seq_start
                  , seq_end
                  , strand
                  , hstart
                  , hend
                  , perc_id
                FROM feature
                WHERE contig = $col_id
                  AND analysis = $ana_id
                  AND hid = '$row_name'
                };
            my $sth = $ensdb->prepare($sql);
            $sth->execute;
            while (my ($col_start, $col_end, $col_strand,
                $row_start, $row_end, $pid) = $sth->fetchrow)
            {
                if ($col_strand == -1) {
                    ($col_start, $col_end) = ($col_end, $col_start);
                }
                $canvas->createLine(
                    $x1 + ($col_start / $scale),
                    $y1 + ($row_start / $scale),
                    $x1 + ($col_end   / $scale),
                    $y1 + ($row_end   / $scale),
                    -width  => 2,
                    -fill   => 'DarkSlateGrey',
                    );
                $feature_count++;
                unless ($feature_count % 10) {
                    print STDERR ".";
                    unless ($feature_count % 500) {
                        printf STDERR " %10d\n", $feature_count;
                    }
                }
            }
        }
        if ($row > 10) {
            warn "DEBUG BAILOUT";
            last;
        }
    }
    printf STDERR " %10d\n", $feature_count;
    
    # Put the sequence background under everything else
    $canvas->lower('seq_rect', 'all');
    
    my $rec = $canvas->createRectangle(
        $canvas->bbox('all'),
        -outline    => undef,
        -fill       => 'grey',
        );
    $canvas->lower($rec, 'all');
        #$canvas->createRectangle($x1, $x2, $x1, $x2);
    
    $cw->fix_window_min_max_sizes;
    
    
    Tk::MainLoop();
}

sub highlight_seq_rect {
    my( $canvas ) = @_;

    my $sel_tag = 'selected';
    my $lab_tag = 'seq_label';
    my $sel_color = 'LemonChiffon';
    
    $canvas->delete($lab_tag);
    my @selected = $canvas->find('withtag', $sel_tag);
    if (@selected) {
        foreach my $obj (@selected) {
            $canvas->itemconfigure($obj, -fill => 'white');
            $canvas->dtag($obj, $sel_tag);
        }
    }

    my $area = $canvas->find('withtag', 'seq_rect&&current') or return;
    $canvas->addtag($sel_tag, 'withtag', $area);
    $canvas->itemconfigure($area, -fill => $sel_color);
    
    my $inf = get_canvas_item_info($canvas, $area);
    
    my $pad = 5;
    my ($x1, $y1, $x2, $y2) = $canvas->coords($area);
    my $x_pos = $x1 + (($x2 - $x1) / 2);
    my $y_pos = $y1 + (($y2 - $y1) / 2);
    my $font = ['Helvetica', 12, 'bold'];
    my $col_label = $canvas->createText(
        $x_pos, $y1 - $pad,
        -text       => $inf->{'col'},
        -anchor     => 's',
        -justify    => 'center',
        -tags       => [$lab_tag],
        );
    my $row_label = $canvas->createText(
        $x1 - $pad, $y_pos,
        -text       => $inf->{'row'},
        -anchor     => 'e',
        -justify    => 'right',
        -tags       => [$lab_tag],
        );
    
    my $lab_pad = $pad / 2;
    
    my @col_label_rect = expand_bbox($pad / 2, $canvas->bbox($col_label));
    my $clr = $canvas->createRectangle(
        @col_label_rect,
        -fill       => $sel_color,
        -outline    => undef,
        -tags       => [$lab_tag],
        );
    $canvas->lower($clr, $col_label);

    my @row_label_rect = expand_bbox($pad / 2, $canvas->bbox($row_label));
    my $rlr = $canvas->createRectangle(
        @row_label_rect,
        -fill       => $sel_color,
        -outline    => undef,
        -tags       => [$lab_tag],
        );
    $canvas->lower($rlr, $row_label);
}

sub expand_bbox {
    my( $pad, @bbox ) = @_;
    
    $bbox[0] -= $pad;
    $bbox[1] -= $pad;
    $bbox[2] += $pad;
    $bbox[3] += $pad;
    
    return @bbox;
}

sub get_canvas_item_info {
    my( $canvas, $item ) = @_;
    
    my $inf = {};
    foreach my $tag ($canvas->gettags($item)) {
        if (my ($t, $v) = split /=/, $tag, 2) {
            $inf->{$t} = $v;
        }
    }
    return $inf;
}


__END__

=head1 NAME - ens_blast_dotter

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

