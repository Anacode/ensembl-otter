#!/usr/local/bin/perl -w

### genome_canvas_test

use strict;
use GenomeCanvas;
use GenomeCanvas::Band::TilingPath;
use GenomeCanvas::Band::Plot;
use Getopt::Long 'GetOptions';

{
    my $host = 'ensrv3';
    my $db   = 'chr20';
    my $user = 'ensro';
    my $fpc = 'chr20';
    my $static_type = 'SANGER';
    my $scale = 2000;
    my $labels = 1;
    my $n_tiles = 1;
    my $chr_name = '';
    my $chr_start = 0;
    my $chr_end = 0;
    my $font_size = 12;
    GetOptions(
        'host=s'        => \$host,
        'db=s'          => \$db,
        'user=s'        => \$user,
        'fpc=s'         => \$fpc,
        'scale=s'       => \$scale,
        'type=s'        => \$static_type,
        'label!'        => \$labels,
        'tiles=i'       => \$n_tiles,
        'chr=s'         => \$chr_name,
        'start=i'       => \$chr_start,
        'end=i'         => \$chr_end,
        'font_size=i'   => \$font_size,
        ) or die "Error processing command line options";

    my $mw = GenomeCanvas::MainWindow->new;
    $mw->title($fpc);
    my $gc = GenomeCanvas->new($mw);
    $gc->font_size($font_size);
    
    my $canvas = $gc->canvas;
    #$canvas->createPolygon(
    #    0,0, -20,0, 0,-20,
    #    -fill   => 'red',
    #    -outline => undef,
    #    );

    if (1) {
        require Bio::EnsEMBL::DBSQL::Obj;
        
        my $db = Bio::EnsEMBL::DBSQL::Obj->new(
            -DBNAME => $db,
            -USER   => $user,
            -HOST   => $host,
            );

        $db->static_golden_path_type($static_type);
        my $stadp = $db->get_StaticGoldenPathAdaptor();

        my( $vc );
        if ($chr_start) {
            $chr_name ||= $fpc;
            print STDERR "Fetching region of chr '$chr_name' from $chr_start to $chr_end\n";
            $vc = $stadp->fetch_VirtualContig_by_chr_start_end(
                $chr_name,
                $chr_start,
                $chr_end,
                );
        } else {
            print STDERR "Fetching virtual contig for all of fpc contig '$fpc'\n";
            $vc = $stadp->fetch_VirtualContig_by_fpc_name($fpc);
        }
        
        my $tiling = GenomeCanvas::Band::TilingPath->new($vc);
        $tiling->show_labels($labels);
        $tiling->tiling_direction(-1);
        my $set = $gc->new_BandSet;
        $set->add_Band($tiling);
        
        #my $tiling2 = GenomeCanvas::Band::TilingPath->new($vc);
        #$tiling2->show_labels($labels);
        #$tiling2->tiling_direction(1);
        #my $set2 = $gc->new_BandSet;
        #$set2->add_Band($tiling2);

        my $plot = GenomeCanvas::Band::Plot->new;
        $plot->virtual_contig($vc);
        $plot->height(200);
        $plot->range(0.3,0.7);
        $plot->x_major(0.2);
        my $plot_set = $gc->new_BandSet;
        $plot_set->add_Band($plot);

        print STDERR "Rendering canvas\n";
        $gc->residues_per_pixel($scale);
        $gc->render;
    }
    elsif (0) {
        my $band = GenomeCanvas::Band->new;
        for (0..2) {
            my $set = $gc->new_BandSet;
            for (0..3) {
                $set->add_Band($band);
            }
        }
        $gc->render;
    }
    elsif (0) {
        require Bio::EnsEMBL::DBSQL::Obj;
        
        my $db = Bio::EnsEMBL::DBSQL::Obj->new(
            -DBNAME => 'chr_20',
            -USER   => 'ensadmin',
            -HOST   => 'localhost',
            );

        my $get_map = $db->prepare(q{
            SELECT s.map_position
              , s.sanger_name
              , c.id
              , c.htg_phase
              , ctg.length
            FROM clone c
              , simple_map s
              , contig ctg
            WHERE c.internal_id = s.clone_internal_id
              AND ctg.clone = c.internal_id
              AND s.map_name = 'chr_20'
            ORDER BY s.map_position ASC
            });
        $get_map->execute;
        my $ans = $get_map->fetchall_arrayref;

        my $last_pos = 0;
        for (my $i = 0; $i < @$ans;) {
            my($pos, $sname, $acc, $phase, $length) = @{$ans->[$i]};

            for ($i++; $i < @$ans and $ans->[$i][2] eq $acc; $i++) {
                $length += $ans->[$i][4];
            }
            #print "$pos, $sname, $acc, $phase, $length\n";
            my $gap = $pos - $last_pos - 1;
            my $name = $sname || $acc;
            add_contig($canvas, $name, $length, $phase, $gap);
            $last_pos = $pos;
        }
    }
    elsif (0) {
        my $last_ctg = '';
        while (<>) {
            my ($ctg, $sname, $acc, $length, $status) = split /\t/, $_;
            $length ||= 50000;
            my $phase = $status =~ /fin|ana|sub/i ? 3 : 1;
            my $gap = 0;
            my $name = $sname || $acc;
            if ($last_ctg and $last_ctg ne $ctg) {
                $gap = 1;
            }
            add_contig($canvas, $name, $length, $phase, $gap);
            $last_ctg = $ctg;
        }
    }
    
    $gc->set_scroll_region;

    my $button_frame = $mw->Frame;
    $button_frame->pack(
        -side => 'top',
        );

    make_button($button_frame, 'Exit',
        #sub{ kill 'INT', $$ } );
        sub{ exit } );

    make_button($button_frame, 'Zoom in', sub{ $gc->zoom(2) } );
    make_button($button_frame, 'Zoom out', sub{ $gc->zoom(-2) } );
    make_button($button_frame, 'Redraw', sub{
        $gc->render;
        $gc->fix_window_min_max_sizes
        } );
    make_button($button_frame, 'Show outline', sub{
            foreach my $obj ($canvas->find('withtag', 'all')) {
                if ($canvas->type($obj) eq 'text') {
                    $canvas->itemconfigure($obj, -fill => 'red');
                } else {
                    $canvas->itemconfigure($obj, -outline => 'red');
                }
            }
        } );

    make_button($button_frame, 'PostScript',
        sub {
            my $page_width = 841;

            my @bbox = $canvas->cget('scrollregion');
            my $canvas_width  = $bbox[2] - $bbox[0];
            my $canvas_height = $bbox[3] - $bbox[1];
            my $tile_width = $canvas_width / $n_tiles;
            for (my $i = 0; $i < $n_tiles; $i++) {
                my( $file );
                if ($n_tiles == 1) {
                    $file = "$fpc.ps";
                } else {
                    my $n = ('01'..'99')[$i];
                    $file = "${fpc}_$n.ps";
                }
                $canvas->postscript(
                    -file => $file,
                    '-x' => $bbox[0] + ($i * $tile_width),
                    '-y' => $bbox[1],
                    -width  => $tile_width,
                    -height => $canvas_height,
                    -pageanchor => 'nw',
                    -pagex => 36,
                    -pagey => 36,
                    -pagewidth => $page_width - 72,
                    -rotate => 1,   # landscape
                    );
                warn "Printed to file '$file'"
            }
        });
    $gc->fix_window_min_max_sizes;
}




                            ###############
                            Tk::MainLoop();
                            ###############

sub make_button {
    my( $parent, $label, $command ) = @_;
    
    my $button = $parent->Button(
        -text => $label,
        -command => $command,
        );
    $button->pack(
        -side => 'left',
        );
    return $button;
}

sub add_contig {
    my( $canvas, $name, $length, $phase, $gap ) = @_;

    my $fill_color = $phase == 3 ? 'black' : 'grey';

    my ($right_most) = ($canvas->bbox('contig'))[2] || 0;

    my $size = $length / 2000;  # 1 pixel = 2 kbp
    my $x1 = $right_most - 1;
    $x1 += $gap * 7.5;
    my $rec = $canvas->createRectangle(
        $x1, 0, $x1 + $size, 8,
        -fill => $fill_color,
        -outline => undef,
        -tags => ['contig', $name],
        );

    my $label = $canvas->createText(
        $x1, -1,
        -text => $name,
        #-font => '-*-helvetica-medium-r-*-*-24-*-*-*-*-*-*-*',
        -font => ['helvetica', 12],
        -anchor => 'sw',
        -tags => ['contig_label', $name],
        );

    my @bbox = $canvas->bbox($name);

    my $sp = 5;
    expand_bbox(\@bbox, $sp);
    my $bkgd = $canvas->createRectangle(
        @bbox,
        -fill    => undef,
        -outline => undef,
        -tags => ['contig_bkgd', $name],
        );
    $canvas->lower($bkgd, $rec);
    nudge_into_free_space($canvas, $name);
}

sub expand_bbox {
    my( $bbox, $pad ) = @_;
    
    $bbox->[0] -= $pad;
    $bbox->[1] -= $pad;
    $bbox->[2] += $pad;
    $bbox->[3] += $pad;
}

sub nudge_into_free_space {
    my( $canvas, $ac ) = @_;
    
    my %self = map {$_, 1} $canvas->find('withtag', $ac);
    while (grep ! $self{$_}, $canvas->find('overlapping', $canvas->bbox($ac))) {
        $canvas->move($ac, 0, -5);
    }
}


__END__

=head1 NAME - genome_canvas_test

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

