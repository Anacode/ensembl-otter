#!/usr/local/bin/perl5.6.1 -w

### reminder

use strict;
use CanvasWindow;
use Time::Local 'timelocal';
use Getopt::Long 'GetOptions';

{
    my $test_flag = 0;
    GetOptions(
        'test!' => \$test_flag,
        ) or die "Error processing command line";

    my $mw = CanvasWindow::MainWindow->new;
    $mw->title('Reminder');
    $mw->bind('<Control-q>', sub {$mw->destroy});
    $mw->bind('<Control-Q>', sub {$mw->destroy});

    my $one_day_in_sec = 24 * 60 * 60;

    my $gc = CanvasWindow->new($mw);
    my $canvas = $gc->canvas;
    my $txt = $canvas->createText(
        10, 10,
        -anchor => 'nw',
        -font   => ['helvetica', 72, 'bold'],
        -text   => 'awaiting next event',
        -fill   => 'firebrick',
        );
    
    my @day = (localtime)[3,4,5];
    
    # after, repeat
    my @remind = qw{
        lunch   12:15
        tea     15:15
        bus     17:30
        bus     18:30
        };
    for (my $i = 0; $i < @remind; $i += 2) {
        my ($rem, $when) = @remind[$i, $i + 1];
        my( $warn_time );
        if ($test_flag) {
            $warn_time = time + 5;
        } else {
            my ($hr, $min) = $when =~ /^(\d+):(\d+)$/
                or die "Can't parse time from '$when'";
            $min -= 5;  # Warn 5 min before
            $warn_time = timelocal(0, $min, $hr, @day);
        }
        my $message = sub {
            $canvas->itemconfigure( $txt,
                -text => "$rem at $when",
                );
            $gc->fix_window_min_max_sizes;
            $mw->deiconify;
            };
        my $wait = $warn_time - time;
        $wait += $one_day_in_sec if $wait < 0;
        $mw->after(1000 * $wait, $message);
        last if $test_flag;
    }
    
    # Restart after 1 day.
    $mw->after(1000 * $one_day_in_sec, sub{ exec($0, @ARGV) });
    
    
    $gc->fix_window_min_max_sizes;
    #$mw->iconify;
    $mw->withdraw;
    Tk::MainLoop();
}


__END__

=head1 NAME - reminder

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

