#!/usr/local/bin/perl
$| = 1;
use strict;
use Getopt::Long;

use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::AnnotatedGeneAdaptor;
use Bio::Otter::Converter;
use Bio::Otter::Author;

my $host     = 'localhost';
my $user     = 'root';
my $pass     = '';
my $port     = 3306;
my $dbname   = 'otter';

my $dna_host   = 'ecs1d';
my $dna_user   = 'ensro';
my $dna_port   = 3306;
my $dna_pass   = undef;
my $dna_dbname = undef;

my $chr      = '6';
my $chrstart = 1;
my $chrend   = 20000000;

my $store;
my $print;

my $acefile;
my $xmlfile;
my $dbfile;

&GetOptions( 'host:s'    => \$host,
             'user:s'    => \$user,
             'pass:s'    => \$pass,
             'port:s'    => \$port,
             'dbname:s'  => \$dbname,
             'dna_host:s'=> \$dna_host,
             'dna_user:s'=> \$dna_user,
             'dna_pass:s'=> \$dna_pass,
             'dna_port:s'=> \$dna_port,
             'dna_dbname:s'  => \$dna_dbname,
             'chr:s'     => \$chr,
             'chrstart:n'=> \$chrstart,
             'chrend:n'  => \$chrend,
             'acefile:s' => \$acefile,
             'xmlfile:s' => \$xmlfile,
             'dbfile:s'  => \$dbfile,
             'store'     => \$store,
             'print'     => \$print);

my $fh;

if ($acefile) {
  open(ACE,"<$acefile");
  $fh = \*ACE;
} elsif ($xmlfile) {
  open(XML,"<$xmlfile");
  $fh = \*XML;
} else {
  die "Must enter an ace file or xml file\n";
}

if ($dbfile) {
  open(DB,"<$dbfile") || die "Can't open $dbfile";
}

my %accession;

while (<DB>) {
  chomp;
  my @f = split(' ',$_);
  $accession{$f[0]} = $f[1];

}
  
  my $odb = new Bio::Otter::DBSQL::DBAdaptor(-host => $host,
                                             -user => $user,
                                             -pass => $pass,
                                             -port => $port,        
                                             -dbname => $dbname);
  if (defined($dna_dbname)) {
    my $dnadb = new Bio::EnsEMBL::DBSQL::DBAdaptor(-host => $dna_host,
                                                 -user => $dna_user,
                                                 -pass => $dna_pass,
                                                 -port => $dna_port,
                                                 -dbname => $dna_dbname);
    $odb->dnadb($dnadb);
  }

  my $sgp = $odb->get_SliceAdaptor;
  my $ga  = $odb->get_GeneAdaptor;
  my $ea  = $odb->get_ExonAdaptor;
  my $ta  = $odb->get_TranscriptAdaptor;
  my $ca  = $odb->get_CloneAdaptor;

my @genes;
my $chrname;
my $chrstart;
my $chrend;
my $genes;

if ($acefile) {
  ($genes,$chrname,$chrstart,$chrend) = Bio::Otter::Converter::ace_to_otter($fh);
} elsif ($xmlfile) {
    ### broken here - XML_to_otter has changed
  ($genes,$chrname,$chrstart,$chrend) = Bio::Otter::Converter::XML_to_otter($fh,$odb);
}

@genes = @$genes;

if ($print) {
  print "Printing @genes\n";
  foreach my $gene (@genes) {
    print $gene->toXMLString . "\n";
  }
}
if ($store) {  
  $odb->begin_work();

  my $vcontig = $sgp->fetch_by_chr_start_end($chr,$chrstart,$chrend);

  my $anal = $odb->get_AnalysisAdaptor()->fetch_by_logic_name('otter');

  if( !defined $anal ) {
      die "No analysis object associated with otter. Dieing ...";
  }

  my $oaga = $odb->get_GeneAdaptor();
  
  my $name = `whoami`; chomp($name);
  
  my $email = $name . "\@sanger.ac.uk";
  
  my $author = new Bio::Otter::Author(-name => $name, -email => $email);
  my $time = time;
  
  foreach my $gene (@genes) {
    print "Stable id " . $gene->stable_id . "\n";
  
    $gene->adaptor($ga);
    $gene->analysis($anal);
    $gene->type('otter');
    $gene->gene_info->author($author);
    $gene->created($time);
    $gene->modified($time);
    $gene->version(1);
  
    foreach my $tran (@{$gene->get_all_Transcripts}) {
      $tran->adaptor($ta);
      $tran->transcript_info->author($author);
      $tran->created($time);
      $tran->modified($time);
      $tran->version(1);
      
    }
    my $count = 1;
  
    foreach my $exon (@{$gene->get_all_Exons}) {
      #$exon->stable_id($gene->stable_id . ".$count");
      $exon->contig($vcontig);
      $exon->adaptor($ea);
      $exon->created($time);
      $exon->modified($time);
      $exon->version(1);
  
      $count++;
    }

    $gene->transform();

    $oaga->store($gene);
  }
  
  $odb->commit();
}

exit(0);

__DATA__

    foreach my $tran ($gene->get_all_Transcripts) {
      $tran->sort;
      print "Transcript " . $tran->stable_id . " class " . $tran->transcript_info->class->name . "\n";
      if ($tran->translation) { 
        print "Translation " . $tran->translation->start_exon->stable_id . "\t" . $tran->translation->start . "\n";
        print "Translation " . $tran->translation->end_exon->stable_id . "\t" . $tran->translation->end . "\n";
        foreach my $exon ($tran->get_all_Exons) {
           print "Exon " . $exon->stable_id . "\t" . $exon->start . "\t" . $exon->end . "\t" . $exon->strand . 
                 "\t" . $exon->phase . "\t" . $exon->end_phase . "\n";
        }
        print "Translation " . $tran->stable_id . " " . $tran->translate->seq . "\n";
      } else {
        print "No translation for " . $tran->stable_id . "\n";
      }
    }
