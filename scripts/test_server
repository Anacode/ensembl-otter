#!/usr/local/bin/perl

$| = 1;

use strict;
use Getopt::Long;
use HTTP::Request;
use LWP;
use OtterDefs;

use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::AnnotatedGeneAdaptor;
use Bio::Otter::TranscriptRemark;
use Bio::Otter::GeneRemark;
use Bio::Otter::Converter;
use Bio::Otter::Author;
use Bio::Otter::AnnotationBroker;

my $serverport   = $OTTER_SERVER_PORT;
my $serverhost   = $OTTER_SERVER;

my $dataset    = $OTTER_DEFAULT_SPECIES;

my $chr        = '6';
my $minstart   = 1;
my $maxend     = 10000000;
my $niter      = 100;

my $avsize     = 500000;

my $author     = (getpwuid($<))[0];
my $email      = $author . "\@sanger.ac.uk";

my $edit_freq = 0.5;

&GetOptions(
  'chr:s'        => \$chr,
  'minstart:n'   => \$minstart,
  'maxend:n'     => \$maxend,
  'niter:n'      => \$niter,
  'edit_freq:f'  => \$edit_freq,
  'serverhost:s' => \$serverhost,
  'serverport:n' => \$serverport,
  'dataset:s'    => \$dataset,
);

my %dbinfo     = %{$OTTER_SPECIES->{$dataset}};
my %defaults   = %{$OTTER_SPECIES->{'defaults'}};

my $host = $dbinfo{HOST}   || $defaults{HOST},
my $user = $dbinfo{USER}   || $defaults{USER},
my $pass = $dbinfo{PASS}   || $defaults{PASS},
my $port = $dbinfo{PORT}   || $defaults{PORT},
my $type = $dbinfo{TYPE}   || $defaults{TYPE};
my $dbname = $dbinfo{DBNAME};

print STDERR "\nDatabase dbname : [$dbname] host : [$host] user : [$user] pass : [$pass] port : [$port]\n";

my $dna_host = $dbinfo{DNA_HOST}    || $defaults{DNA_HOST},
my $dna_user = $dbinfo{DNA_USER}    || $defaults{DNA_USER},
my $dna_pass = $dbinfo{DNA_PASS}    || $defaults{DNA_PASS},
my $dna_port = $dbinfo{DNA_PORT}    || $defaults{DNA_PORT},
my $dna_dbname = $dbinfo{DNA_DBNAME};

my $server_url   = "http://" . $serverhost . ":" . $serverport;
print $server_url . "\n";

my $odb = new Bio::Otter::DBSQL::DBAdaptor(
  -host   => $host,
  -user   => $user,
  -pass   => $pass,
  -port   => $port,
  -dbname => $dbname
);

$odb->assembly_type($type) if ($type);

$type = $odb->assembly_type($type);

if (defined($dna_dbname)) {
  my $dnadb = new Bio::EnsEMBL::DBSQL::DBAdaptor(
    -host   => $dna_host,
    -user   => $dna_user,
    -pass   => $dna_pass,
    -port   => $dna_port,
    -dbname => $dna_dbname
  );
  $dnadb->assembly_type($type) if ($type);
  $odb->dnadb($dnadb);
}

my $sa   = $odb->get_SliceAdaptor;
my $ab   = new Bio::Otter::AnnotationBroker($odb);
my $oaga = $odb->get_GeneAdaptor;

my @authors = qw(searle michele james birney);

my $ndiffxml = 0;
my $ndiffdb  = 0;


for (my $i = 0 ; $i < $niter ; $i++) {
  print "\n*** Iteration $i/$niter ***\n";
  
  # Randomly select a region

  my $requested_start = int(rand($maxend - $minstart)) + $minstart;
  my $requested_end   = $requested_start + $avsize - 1;

  my $author = pop @authors;
  unshift @authors,$author;
  my $email  = $author . "\@sanger.ac.uk";

  print "Author = $author\n";

  #Fetch it from the server
  my $ua = LWP::UserAgent->new;
    my $request_str = $server_url . "/perl/get_region?" . 
              "chrstart=$requested_start" . 
              "&chrend=$requested_end"    . 
              "&chr=$chr"                 .
              "&author=$author"           .
              "&email=$email"             .
              "&lock=true"                .
              "&dataset=$dataset";
  

  print "\nRequest URL : $request_str\n\n";

  my $request  = HTTP::Request->new(GET => $request_str);
  my $response = $ua->request($request);

  if (!$response->content =~ /ERROR/s) {
    print "Failed request\n";
    print $response->content;
    next;
  }

  my $xmlfile1 = get_tmp_file("../data","test_server","xml");
  open FPXML, ">$xmlfile1";
  print FPXML $response->content;
  close FPXML;

  my $chrname;
  my $chrstart;
  my $chrend;
  my $genes;

  #Turn it into objects

  print "Original range $requested_start $requested_end\n";
  my $x2oslice;
  open FPXML, "$xmlfile1";
  my $fh = \*FPXML;
  #($genes, $chrname, $chrstart, $chrend) = Bio::Otter::Converter::XML_to_otter($fh);
  ($genes, $x2oslice) = Bio::Otter::Converter::XML_to_otter($fh);
  close FPXML;
  $chrstart = $x2oslice->chr_start;
  $chrend   = $x2oslice->chr_end;
  
  print "Original range  : $requested_start\t$requested_end\n";
  print "Slice range     : $chrstart\t$chrend\n\n";
 
  if ($chrend == -1) {
     print STDERR "ERROR : Invalid XML\n[" . $response->content . "]\n";
     next;
  } 
  #Attach it to sequence (we actually need to connect to a DB for this)
  my $slice = $sa->fetch_by_chr_start_end($chr, $chrstart, $chrend);

  #Edit it
  print "Editing region...\n";
  my $nchange = do_edits($genes, $chrstart, $chrend, $edit_freq);
  print "done editing\n";
  print "\nNumber of changes to region [$nchange]\n\n";
  
  my $xmlstr = Bio::Otter::Converter::genes_to_XML_with_Slice($slice, $genes, $type);

  open (OUT,">../data/test_server.edited.xml");
  print OUT $xmlstr;
  close(OUT);
  
  print "Writing region back to server...";
  $ua = LWP::UserAgent->new;
  my $request =
    HTTP::Request->new(POST => $server_url . "/perl/write_region", HTTP::Headers->new, "author=$author&dataset=$dataset&email=$email&unlock=true&data=$xmlstr"
  );
  
  my $response = $ua->request($request);
  if (!$response->content =~ /ERROR/s) {
    print "Failed write request " . $response->is_success . " " . $response->code . "\n";
    print $response->content;
    next;
  } else {
    print "\n" . $response->content;
  }
  print "done\n";
  
  print "Rereading region from server for checking...";
  $ua = LWP::UserAgent->new;
  my $request =
    HTTP::Request->new(GET => $server_url . "/perl/get_region?chrstart=$requested_start&chrend=$requested_end&chr=$chr&author=$author&email=$email&dataset=$dataset"
  );
  my $response = $ua->request($request);
  if (!$response->content =~ /ERROR/s) {
    print "Failed second read request\n";
    print $response->content;
    next;
  }

  print "done\n\n";
  my $xmlfile2 = get_tmp_file("../data","test_server","xml");
  open FPXML, ">$xmlfile2";
  print FPXML $response->content;
  close FPXML;

  #Turn new copy into objects
  my $comp_chrname;
  my $comp_chrstart;
  my $comp_chrend;
  my $xml_comp_genes;
  my $comp_slice;

  open FPXML, "$xmlfile2";
  my $fh2 = \*FPXML;
  #($xml_comp_genes, $comp_chrname, $comp_chrstart, $comp_chrend) = Bio::Otter::Converter::XML_to_otter($fh2);
  ($xml_comp_genes, $comp_slice) = Bio::Otter::Converter::XML_to_otter($fh2);
  close FPXML;
 
  $comp_chrstart = $comp_slice->chr_start;
  $comp_chrend = $comp_slice->chr_end;

  print "Second requested range : $chrstart\t$chrend\n";
  print "Second contig range    : $comp_chrstart\t$comp_chrend\n\n";

  #Check its the same as what we stored
  print "Comparing XML from server to local XML version...";
  my @events = $ab->compare_genes($genes, $xml_comp_genes, $slice);
  print "done\n";
  
  foreach my $event (@events) {
    print "Difference between retrieved XML and in memory editted genes: ",
      $event->to_string, "\n";
    $ndiffxml++;
  }
  if (scalar(@events)) {
    print "XML files: $xmlfile1 $xmlfile2\n";
    pause();
  }
  
  
  #Read region directly from database and check its the same as the XML
  my $slice2 = $sa->fetch_by_chr_start_end($chr, $chrstart, $chrend);
  my $db_comp_genes = $oaga->fetch_by_Slice($slice2);


  print "\nComparing to database annotations...";
  my @events        = $ab->compare_genes($genes, $db_comp_genes, $slice2);
  print "done\n";
  
  print "Found " . scalar(@events) . " differences (should be 0)\n";
  
  foreach my $event (@events) {
    print "Difference between genes retrieved from DB and in memory editted genes: ",
    $event->to_string, "\n";	
    $ndiffdb++;
    print "In memory gene:\n";
    print $event->old_gene->toXMLString . "\n";
    print "DB gene:\n";
    print $event->new_gene->toXMLString . "\n";
  }
  if (scalar(@events)) {
    print "XML files: $xmlfile1 $xmlfile2\n";
    pause();
  }
  #pause();
  unlink($xmlfile1);
  unlink($xmlfile2);
}

print "Total number of XML differences: $ndiffxml\n";
print "Total number of DB differences: $ndiffdb\n";

sub do_edits {
  my ($genes,$requested_start,$requested_end,$edit_freq) = @_;
  my $nchange = 0;
  #print "edit freq = $edit_freq\n";

  GENE: foreach my $gene (@$genes) {
    my $chg = 0;
   

    # Dont try to edit partials
    foreach my $exon (@{ $gene->get_all_Exons()}) {
      if ($exon->start < 1 || $exon->end > ($requested_end - $requested_start + 1)) {
        #print "Not editting partial gene " . $gene->stable_id . " exon " . $exon->start . " to " . $exon->end . "\n";
        next GENE;
      }
    }

    if (rand 1 < 0.01) {
      $gene->stable_id(undef);
      print "Removed gene stable id\n";
    }
    if (rand 1 < 0.25) {
      my $num = int(rand(10000000)); 
      $gene->gene_info->remark(new Bio::Otter::GeneRemark(-remark => "Another remark $num"));
      print "Added gene remark\n";
    }

    foreach my $trans (@{ $gene->get_all_Transcripts() }) {
      if (rand 1 < 0.01) {
        $trans->stable_id(undef);
        print "Removed transcript stable id\n";
      }
      if (rand 1 < 0.25) {
        my $num = int(rand(10000000)); 
        $trans->transcript_info->remark(new Bio::Otter::TranscriptRemark(-remark => "Another remark $num"));
        print "Added transcript remark\n";
      }
      foreach my $exon (@{ $trans->get_all_Exons() }) {
        if (rand 1 < 0.01) {
          $exon->stable_id(undef);
          print "Removed exon stable id\n";
        }
        
        if (defined ($trans->translation) && ($trans->translation->start_Exon() == $exon || 
          $trans->translation->end_Exon() == $exon)) {
          #print "Not editting translation start or end exons\n";
          next;
        }
        if ($exon->length < 25) {
          next;
        }
        if (rand 1 < $edit_freq) {
          $exon->start($exon->start + int(rand(10)));
          $chg = 1;
          $nchange++;
        }

        if (rand 1 < $edit_freq) {
          $exon->start($exon->start - int(rand(10)));
          $chg = 1;
          $nchange++;
          print "Changed exon " . $exon->stable_id . "\n";

        }

        if (rand 1 < $edit_freq) {
          $exon->end($exon->end + int(rand(10)));
          $chg = 1;
          $nchange++;
          print "Changed exon " . $exon->stable_id . "\n";

        }

        if (rand 1 < $edit_freq) {
          $exon->end($exon->end - int(rand(10)));
          $chg = 1;
          $nchange++;
          print "Changed exon " . $exon->stable_id . "\n";

        }
        my $len = $exon->length;
        if ($exon->phase != -1) {
          $exon->end_phase(($len+$exon->phase)%3);
        }
      }
    }
  }
  #print "Made $nchange changes to exon coordinates\n";
  return $nchange;
}

sub pause {
    print STDERR "Pausing\n";
    print STDERR "press ^D to continue\n";
    `cat `;
}

sub get_tmp_file {
  my ($dir,$stub,$ext) = @_;


  if ($dir !~ /\/$/) {
    $dir = $dir . "/";
  }

  # This is not good

  my $num = int(rand(10000));
  my $file = $dir . $stub . "." . $num . "." . $ext;

  while (-e $file) {
    $num = int(rand(10000));
    $file = $stub . "." . $num . "." . $ext;
  }

  return $file;
}

