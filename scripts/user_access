#!/usr/local/bin/perl -w

use strict;
use warnings;

use OtterDefs;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Author;

{

    my $create_def = 0;
    my $alter_def  = 0;
    my $view       = 1;
    my $create     = 0;
    my $author     = undef;
    my $email      = undef;
    my $dbhost     = 'humsrv1';
    my $dbport     = '3306';
    my $dbuser     = 'ensadmin';
    my $dbpass     = 'ensembl';
    my $dbname     = 'test_otter_human';
    my $assignAllDefault = 0;
    Bio::Otter::Lace::Defaults::do_getopt('default'          => \$create_def,
                                          'assignAllDefault' => \$assignAllDefault,
                                          'alterDefault'     => \$alter_def,
                                          'create'           => \$create,
                                          'view!'            => \$view,
                                          'author=s'         => \$author,
                                          'email=s'          => \$email,
                                          'db_host=s'        => \$dbhost,
                                          'db_port=s'        => \$dbport,
                                          'db_user=s'        => \$dbuser,
                                          'db_pass=s'        => \$dbpass,
                                          'db_name=s'        => \$dbname,
                                          ) 
        || die $Bio::Otter::Lace::Defaults::GETOPT_ERRSTR . "\n";
    
    my $dbAdapt = Bio::Otter::DBSQL::DBAdaptor->new(-dbname => $dbname,
                                                    -user   => $dbuser,
                                                    -pass   => $dbpass,
                                                    -host   => $dbhost,
                                                    -port   => $dbport,
                                                    );

    create_default($dbAdapt)     if $create_def;
    assignAllDefault($dbAdapt)   if $assignAllDefault;
    alter_default_rule($dbAdapt) if $alter_def;

    if($author){
        create_author_access($dbAdapt, $author, $email)   if $create; 
        my $authObj = $dbAdapt->get_AuthorAdaptor->fetch_by_name($author);
        die "Author '$author' doesn't exist\n" unless $authObj;
        show_sequence_sets_for_Author($dbAdapt, $authObj) if $view;
    }

}

sub show_sequence_sets_for_Author{
    my ($dbAdapt, $author) = @_;
    my $sth = $dbAdapt->prepare(q{
        SELECT ss.assembly_type
             , ss.description
             , ssa.description
             , ssa.access_level
          FROM sequence_set ss 
             , sequence_set_access ssa 
             , access_author aa
             , author a 
         WHERE a.author_id = aa.author_id
           AND ss.assembly_type LIKE ssa.access_spec
           AND aa.access_id = ssa.access_id
           AND a.author_id = ?});
    $sth->execute($author->dbID);

    print "\n\n";
    print "Author " . $author->name . " can see the following sequence sets, with levels\n";
    print "+---------------------------------------------------------+\n";
    print "|".join(", ", qw(set_name set_description rule_description access_level)) . "|\n";
    print "+---------------------------------------------------------+\n";
    while(my @row = $sth->fetchrow){
        print join(", ", grep { defined } @row)."\n";
    }
    
}

sub assignAllDefault{
    my ($dbAdapt) = @_;
    my $defAuthor = $dbAdapt->get_AuthorAdaptor->fetch_by_name($OTTER_GLOBAL_ACCESS_USER);
    my $id        = get_default_rule_id($dbAdapt);
    
    my $sth = $dbAdapt->prepare(q{
        INSERT INTO access_author 
            SELECT ?, author_id 
              FROM author 
             WHERE author_id <> ?});
    $sth->execute($id, $defAuthor->dbID);
    $sth = $dbAdapt->prepare(q{SELECT author_id FROM author});
    $sth->execute();
    while(my ($a) = $sth->fetchrow){
        show_sequence_sets_for_Author($dbAdapt, $dbAdapt->get_AuthorAdaptor->fetch_by_dbID($a));
    }
    exit(0);
}

sub create_author_access{
    my ($dbAdapt, $author, $email) = @_;

    unless($email){
        print "enter author's email address: ";
        $email = <>; chomp($email);
    }

    my $authorObj = Bio::Otter::Author->new(-name  => $author,
                                            -email => $email);
    my $authAdapt = $dbAdapt->get_AuthorAdaptor();
    eval{ $authAdapt->store($authorObj) };
    if($@){
        print "problem creating $author: $@";
        exit();
    }else{
        print "Author '$author' created";
    }
    print "\nNeed to add a rule for $author";

    my $def = 'N';
    unless($author eq $OTTER_GLOBAL_ACCESS_USER){
        print "Use default Rule ('Y'/'N') ['N']: ";
        $def = uc(<>); chomp($def);
    }

    if($def eq 'Y'){
        my $id = get_default_rule_id($dbAdapt);
        my $sth = $dbAdapt->prepare(q{        
            INSERT INTO access_author (access_id, author_id)
                VALUES(?, ?)});
        $sth->execute($id, $authorObj->dbID);
    }else{
        print "\n------------------------------------------------";
        print "\nWhat would you like the rule to be? ('chr1'/'%') ['']: "; 
        my $ruleSpec  = <>; chomp($ruleSpec);
        $ruleSpec   ||= '';
        print "\nWhat would you like the level to be? ('RO'/'RW') ['RO']: ";
        my $authLevel = <>; chomp($authLevel);
        $authLevel  ||= 'RO';
        print "\nType a description for rule? ('default rule') ['DEFAULT']: ";
        my $ruleName  = <>; chomp($ruleName);
        $ruleName   ||= 'DEFAULT';
        
        my $sth = $dbAdapt->prepare(q{
            INSERT INTO sequence_set_access 
                (access_id, access_spec, description, access_level)
                VALUES(NULL, ?, ?, ?)});
        $sth->execute($ruleSpec, $ruleName, $authLevel);
        
        $sth = $dbAdapt->prepare(q{
            INSERT INTO access_author (access_id, author_id)
                VALUES(last_insert_id(), ?)});
        $sth->execute($authorObj->dbID);
    }
    show_sequence_sets_for_Author($dbAdapt, $authorObj);
}

sub create_default{
    my ($dbAdapt) = @_;
    create_author_access($dbAdapt, $OTTER_GLOBAL_ACCESS_USER, '@sanger.ac.uk');
    exit();    
}

sub alter_default_rule{
    my ($dbAdapt) = @_;
    my $id = get_default_rule_id($dbAdapt);
    
    my $sth = $dbAdapt->prepare(q{
        SELECT access_spec, description, access_level FROM sequence_set_access WHERE access_id = ?});
    $sth->execute($id);
    my ($currentSpec, $currentName, $currentLevel) = $sth->fetchrow;
    
    print "\nWhat would you like the rule to be? ('chr1'/'%') ['$currentSpec']: "; 
    my $ruleSpec  = <>; chomp($ruleSpec);
    $ruleSpec   ||= $currentSpec;
    print "\nWhat would you like the level to be? ('RO'/'RW') ['$currentLevel']: ";
    my $authLevel = <>; chomp($authLevel);
    $authLevel  ||= $currentLevel;
    print "\nType a description for rule? ('default rule') ['$currentName']: ";
    my $ruleName  = <>; chomp($ruleName);
    $ruleName   ||= $currentName;

    $sth = $dbAdapt->prepare(q{
        UPDATE sequence_set_access 
           SET access_spec = ?
             , description = ?
             , access_level = ?
         WHERE access_id = ?
     });
    $sth->execute($ruleSpec, $ruleName, $authLevel, $id);
    my $defAuthor = $dbAdapt->get_AuthorAdaptor->fetch_by_name($OTTER_GLOBAL_ACCESS_USER);
    show_sequence_sets_for_Author($dbAdapt, $defAuthor);
    exit();
}

sub get_default_rule_id{
    my ($dbAdapt) = @_;
    my $defAuthor = $dbAdapt->get_AuthorAdaptor->fetch_by_name($OTTER_GLOBAL_ACCESS_USER);
    # get the rule_id that is owned by the $OTTER_GLOBAL_ACCESS_USER
    my $sth = $dbAdapt->prepare(q{
        SELECT access_id 
          FROM access_author 
          WHERE author_id = ?});
    $sth->execute($defAuthor->dbID);
    my ($id) = $sth->fetchrow;
    return $id;
}


=pod

=head1 setup sequence_set level access 

=head1 DESCRIPTION

see conf/README.user2.pod

=head1 USAGE

 -default    set up the default user and rule
 -create     option to create users
 -view       option to view user's rules needs -author too
 -author     name to give the author
 -email      email to give the author
 -help       show this help
 

=cut
