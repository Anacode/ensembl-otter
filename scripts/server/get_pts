#!/usr/local/bin/perl5.8.0 -w

my $enshead = $ENV{ENSHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use CGI;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

$| = 1;

my $cgi = new CGI;
set_nph($cgi);
my %cgi_args = $cgi->Vars;

my $analysis = $cgi_args{analysis};
my $odb = get_DBAdaptor_from_CGI_species($cgi, $OTTER_SPECIES, $enshead);

my $pipekey = $enshead
    ? 'pipeline_db_head'
    : 'pipeline_db';

    # Getting (to) the pipeline adapter:
my @pipe_all = @{ $odb->get_MetaContainer()->list_value_by_key($pipekey) };
if(!@pipe_all) {
    die "This database does not have an associated '$pipekey' in the meta table ";
}
my $pipe_lastval = pop @pipe_all; # we prefer the one added the latest
my $pdb = Bio::EnsEMBL::DBSQL::DBAdaptor->new( eval $pipe_lastval );

my $pipeline_slice;

if($enshead) {
    $pipeline_slice = $pdb->get_SliceAdaptor()->fetch_by_region(
        'chromosome',
        $cgi_args{chr},
        $cgi_args{chrstart},
        $cgi_args{chrend},
        undef,              # strand
        'Otter',            # version
    );
} else {
    $pdb->assembly_type($odb->assembly_type());

    $pipeline_slice = $pdb->get_SliceAdaptor()->fetch_by_chr_start_end(
        $cgi_args{chr},
        $cgi_args{chrstart},
        $cgi_args{chrend},
    );
}

my @pt_optnames = @{ $OrderOfOptions{PredictionTranscript} };
my @pe_optnames = @{ $OrderOfOptions{PredictionExon} };

    # Fetch the features:
my $pt_adaptor = $pdb->get_PredictionTranscriptAdaptor();
    # last_arg=1 means "fetch all exons now"
my $pts = $pt_adaptor->fetch_all_by_Slice($pipeline_slice, $analysis, 1);

print STDERR "Total of ".scalar(@$pts)." $analysis prediction transcripts found\n";

foreach my $pt (@$pts) {

        # output a predictioin transcipt line:
    my @pt_optvalues = ('PredictionTranscript');
    for my $opt (@pt_optnames) {
        push @pt_optvalues, $pt->$opt();
    }
    print join("\t", @pt_optvalues)."\n";

    my $pt_id = $pt->dbID();

    for my $pe (@{$pt->get_all_Exons}) {
            # output an exon line
        my @pe_optvalues = ('PredictionExon');
        for my $opt (@pe_optnames) {
            push @pe_optvalues, $pe->$opt();
        }
        push @pe_optvalues, $pt_id;

        print join("\t", @pe_optvalues)."\n";
    }
}

