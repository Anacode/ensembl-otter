#!/usr/local/bin/perl

use strict;
use warnings;

use CGI;
use OtterDefs;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::ServerSide qw(error_exit
                              send_response
                              set_nph);


$| = 1;

my $q = new CGI;
set_nph($q);
my %params = $q->Vars;
 
my $query_fail = "must be present to get a Sequence Set";

my $email   = $params{'email'}    || error_exit($q,"'email' $query_fail");
my $dataset = $params{'dataset'}  || error_exit($q,"'dataset' $query_fail");
my $author  = $params{'author'}   || error_exit($q,"'author' $query_fail");


unless ($OTTER_SPECIES->{$dataset}) {
    error_exit($q, "Unknown data set '$dataset'\n");
}

my $dbinfo   = $OTTER_SPECIES->{$dataset};
my $defaults = $OTTER_SPECIES->{'defaults'};
## and set
my $host     = $dbinfo->{HOST} || $defaults->{HOST};
my $user     = $dbinfo->{USER} || $defaults->{USER};
my $pass     = $dbinfo->{PASS} || $defaults->{PASS};
my $port     = $dbinfo->{PORT} || $defaults->{PORT};
my $dbname   = $dbinfo->{DBNAME};

print STDERR "Database [$dbname][$host][$user][$pass][$port]";
print STDERR "Author [$author] email [$email] dataset [$dataset]";
  
my( $odb );
eval {
    $odb = new Bio::Otter::DBSQL::DBAdaptor(-host   => $host,
                                            -user   => $user,
                                            -pass   => $pass,
                                            -port   => $port,
                                            -dbname => $dbname);
};
if ($@) {
    error_exit($q, "Failed opening otter database [$@]");
}

my $auth_adapt = $odb->get_AuthorAdaptor();
my $author_obj = $auth_adapt->fetch_by_name($author) || error_exit($q,"No author with name '$author'.");
my $a_email    = $author_obj->email();
#print STDERR "$a_email $email";
#error_exit($q,"'$author' doesn't have email '$email'") unless $email eq $a_email;



# Needs some work.  change the xml or Bio::Otter::Lace::SequenceSet methods
# sort out logic for sequence set access list
# other stuff

my $sth = $odb->prepare(q{
            SELECT assembly_type
              , description
	      , analysis_priority
              , vega_set_id
            FROM sequence_set
            WHERE hide != 'Y'
            ORDER BY assembly_type
            });
$sth->execute;
my $xml = qq`<otter>\n`;
$xml   .= qq`  <sequencesets>\n`;

while(my $row = $sth->fetchrow_hashref){
    #print "SequenceSet||@$row \n";
    my $name  = $row->{'assembly_type'};
    $xml .= qq`    <sequenceset name="$name" hidden="0">\n`;
    foreach my $p(qw/description analysis_priority vega_set_id/){
        # should escape xml here
        $xml .= qq`      <$p>$row->{$p}</$p>\n`;
    }
    $xml .= qq`    </sequenceset>\n`;
}

$xml .= qq`  </sequencesets>\n`;
$xml .= qq`</otter>\n`;

print $xml;
#End main

__END__

=head1 NAME - get_sequencesets

=head1 AUTHOR

Roy Storey,,,, B<email> rds@sanger.ac.uk

