#!/usr/local/bin/perl5.8.0 -w

my $enshead = $ENV{ENSHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use CGI;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');
use Bio::Otter::DBSQL::SimpleBindingAdaptor;

$| = 1;

my $cgi = new CGI;
set_nph($cgi);
my %cgi_args = $cgi->Vars;

my $analysis = $cgi_args{analysis};
my $odb = get_DBAdaptor_from_CGI_species($cgi, $OTTER_SPECIES, $enshead);

my $pipekey = $enshead
    ? 'pipeline_db_head'
    : 'pipeline_db';

    # Getting (to) the pipeline adapter:
my @pipe_all = @{ $odb->get_MetaContainer()->list_value_by_key($pipekey) };
if(!@pipe_all) {
    die "This database does not have an associated '$pipekey' in the meta table ";
}
my $pipe_lastval = pop @pipe_all; # we prefer the one added the latest
my $pdb = Bio::EnsEMBL::DBSQL::DBAdaptor->new( eval $pipe_lastval );

my $pipeline_slice;

if($enshead) {
    $pipeline_slice = $pdb->get_SliceAdaptor()->fetch_by_region(
        'chromosome',
        $cgi_args{chr},
        $cgi_args{chrstart},
        $cgi_args{chrend},
        undef,              # strand
        'Otter',            # version
    );
} else {
    $pdb->assembly_type($odb->assembly_type());

    $pipeline_slice = $pdb->get_SliceAdaptor()->fetch_by_chr_start_end(
        $cgi_args{chr},
        $cgi_args{chrstart},
        $cgi_args{chrend},
    );
}

my @sf_optnames = @{ $OrderOfOptions{SimpleFeature} };

    # Fetch the features:
my $sf_adaptor = $pdb->get_SimpleFeatureAdaptor();
my $sfs = $sf_adaptor->fetch_all_by_Slice($pipeline_slice, $analysis);

print STDERR "Total of ".scalar(@$sfs)." $analysis simple features found\n";

foreach my $sf (@$sfs) {
        # output a SimpleFeature line
    my @sf_optvalues = ('SimpleFeature');
    for my $opt (@sf_optnames) {
        push @sf_optvalues, $sf->$opt();
    }

    print join("\t", @sf_optvalues)."\n";
}

