#!/usr/local/bin/perl5.8.0 -w


# no  lib '/nfs/team71/analysis/lg4/work/ensembl/modules';
# use lib '/nfs/team71/analysis/lg4/work/ensembl_head/modules';
# my $db_metakey = 'pipeline_db_v32';
# my $db_metakey = 'pipeline_db';

use strict;
use OtterDefs;
use CGI;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::Otter::DnaDnaAlignFeature; # also contains the (common) list of option names
use Bio::Otter::DnaPepAlignFeature; #
use Bio::Otter::HitDescription;     # also contains another list of option names

$| = 1;

my $cgi = new CGI;
set_nph($cgi);
my %cgi_args = $cgi->Vars;

my $odb = get_DBAdaptor_from_CGI_species($cgi, $OTTER_SPECIES);

my $pdb = Bio::Otter::Lace::PipelineDB::get_DBAdaptor($odb);

    # transfer the assembly type from OtterDB to PipeDB (should be done elsewhere!)
$pdb->assembly_type($odb->assembly_type());

my $pipeline_slice = $pdb->get_SliceAdaptor()->fetch_by_chr_start_end(
    $cgi_args{chr},
    $cgi_args{chrstart},
    $cgi_args{chrend},
);

my $analysis = $cgi_args{analysis};

my @af_optnames = @{Bio::Otter::DnaDnaAlignFeature->get_option_order()};
my @hd_optnames = @{Bio::Otter::HitDescription->get_option_order()};

my $kind = $cgi_args{kind};
my $method = {
    'dafs' => 'get_DnaAlignFeatureAdaptor',
    'pafs' => 'get_ProteinAlignFeatureAdaptor',
}->{$kind};

    # Fetch the features:
my $af_adaptor = $pdb->$method();
my $afs = $af_adaptor->fetch_all_by_Slice($pipeline_slice, $analysis?$analysis:());

    # Stringify only the simple fields:
my %hit_seen = (); # collect the seen hit names here
foreach my $af (@$afs) {
    if($af->can('get_HitDescription')) {
        my $hit_name = $af->hseqname();

        if(!exists($hit_seen{$hit_name})) { # new one
            my $hd = $af->get_HitDescription();

                # output a HitDescription line
            my @hd_optvalues = ('HitDescription', $hit_name);
            for my $opt (@hd_optnames) {
                push @hd_optvalues, $hd->$opt();
            }
            print join("\t", @hd_optvalues)."\n";

            $hit_seen{$hit_name} = 1;
        }
    }

        # output an AlignFeature line
    my @af_optvalues = ('AlignFeature');
    for my $opt (@af_optnames) {
        push @af_optvalues, $af->$opt();
    }
    push @af_optvalues, $af->analysis()->logic_name();
    push @af_optvalues, $af->cigar_string();

    print join("\t", @af_optvalues)."\n";
}

