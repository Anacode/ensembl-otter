#!/usr/local/bin/perl
$| = 1;
use strict;
use Getopt::Long;

use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::AnnotatedGeneAdaptor;
use Bio::Otter::CloneLockBroker;
use Bio::Otter::AnnotationBroker;
use Bio::Otter::Converter;
use Bio::Otter::Author;

my $host     = 'localhost';
my $user     = 'root';
my $pass     = '';
my $port     = 3306;
my $dbname   = 'steve_test_otter_chr6_with_annots';

my $dna_host   = 'localhost';
my $dna_user   = 'ensro';
my $dna_port   = 3306;
my $dna_pass   = undef;
my $dna_dbname = 'steve_test_otter_chr6';

my $store;
my $print;

my $acefile;
my $xmlfile;
my $dbfile;

my $author_name = ( getpwuid($<) )[0];
my $author_email = $author_name . "\@sanger.ac.uk";

&GetOptions( 'host:s'    => \$host,
             'user:s'    => \$user,
             'pass:s'    => \$pass,
             'port:s'    => \$port,
             'dbname:s'  => \$dbname,
             'dna_host:s'=> \$dna_host,
             'dna_user:s'=> \$dna_user,
             'dna_pass:s'=> \$dna_pass,
             'dna_port:s'=> \$dna_port,
             'dna_dbname:s'  => \$dna_dbname,
             'acefile:s' => \$acefile,
             'xmlfile:s' => \$xmlfile,
             'dbfile:s'  => \$dbfile,
             'store'     => \$store,
             'author:s'  => \$author_name,
             'email:s'   => \$author_email,
             'print'     => \$print);

my $fh;

if ($acefile) {
  open(ACE,"<$acefile");
  $fh = \*ACE;
} elsif ($xmlfile) {
  open(XML,"<$xmlfile");
  $fh = \*XML;
} else {
  die "Must enter an ace file or xml file\n";
}

if ($dbfile) {
  open(DB,"<$dbfile") || die "Can't open $dbfile";
}

my %accession;

while (<DB>) {
  chomp;
  my @f = split(' ',$_);
  $accession{$f[0]} = $f[1];

}
  
my $odb = new Bio::Otter::DBSQL::DBAdaptor(-host => $host,
                                           -user => $user,
                                           -pass => $pass,
                                           -port => $port,        
                                           -dbname => $dbname);
if (defined($dna_dbname)) {
  my $dnadb = new Bio::EnsEMBL::DBSQL::DBAdaptor(-host => $dna_host,
                                               -user => $dna_user,
                                               -pass => $dna_pass,
                                               -port => $dna_port,
                                               -dbname => $dna_dbname);
  $odb->dnadb($dnadb);
}

my $sa  = $odb->get_SliceAdaptor;

my @genes;
my $chrname;
my $chrstart;
my $chrend;
my $genes;

if ($acefile) {
  ($genes,$chrname,$chrstart,$chrend) = Bio::Otter::Converter::ace_to_otter($fh);
} elsif ($xmlfile) {
  ($genes,$chrname,$chrstart,$chrend) = Bio::Otter::Converter::XML_to_otter($fh,$odb);
}

@genes = @$genes;

if ($print) {
  print "Printing @genes\n";
  foreach my $gene (@genes) {
    print $gene->toXMLString . "\n";
  }
}
if ($store) {  
  my $ab = new Bio::Otter::AnnotationBroker($odb);
  my $oaga = $odb->get_GeneAdaptor();

  print "chr = $chrname chrstart = $chrstart chrend = $chrend\n";
  my $slice = $sa->fetch_by_chr_start_end($chrname,$chrstart,$chrend);

  my $cb   = new Bio::Otter::CloneLockBroker($odb);

  my $author = Bio::Otter::Author->new(
                                       -name  => $author_name,
                                       -email => $author_email,
                                      );
  $cb->check_locks_exist_by_slice($slice,$author);


  my $anal = $odb->get_AnalysisAdaptor()->fetch_by_logic_name('otter');
  if( !defined $anal ) {
      die "No analysis object associated with otter. Dieing ...";
  }

  my $dbgenes = $oaga->fetch_by_Slice($slice);

  foreach my $gene (@genes) {
    $gene->analysis($anal);
    $gene->type('otter');
  }


  # These lines force loads from the database to stop attempted lazy
  # loading during the write 
  foreach my $gene (@$dbgenes) {
    $gene->stable_id;
    my $transcripts = $gene->get_all_Transcripts;
    foreach my $tran (@$transcripts) {
      $tran->translation;
      $tran->stable_id;
      my $exons =  $tran->get_all_Exons;
      foreach my $exon (@$exons) {
        $exon->stable_id;
      }
    }
  }


  my @events = $ab->compare_annotations($dbgenes,\@genes,$slice);

# the magic happens!

  $odb->begin_work();

  foreach my $event ( @events ) {
    print $event->to_string,"\n";

    my $gene;
    if ($event->type eq 'deleted') {
      $gene = $event->old_gene;
    } else {
      $gene = $event->new_gene;
    }
    $oaga->attach_to_Slice($gene,$slice);
    $oaga->store($gene);
  }
  $odb->commit();
}
